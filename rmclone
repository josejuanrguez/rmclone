#!/bin/bash

hash column 2>/dev/null || { echo >&2 "I require column but it's not installed. Aborting."; exit 1; }
hash gzip 2>/dev/null || { echo >&2 "I require gzip but it's not installed. Aborting."; exit 1; }
hash wc 2>/dev/null || { echo >&2 "I require wc but it's not installed. Aborting."; exit 1; }
hash grep 2>/dev/null || { echo >&2 "I require grep but it's not installed. Aborting."; exit 1; }
hash basename 2>/dev/null || { echo >&2 "I require basename but it's not installed. Aborting."; exit 1; }
hash tr 2>/dev/null || { echo >&2 "I require tr but it's not installed. Aborting."; exit 1; }
hash cut 2>/dev/null || { echo >&2 "I require cut but it's not installed. Aborting."; exit 1; }

BINDIR=~/.trashbin
REGISTRY=~/.trashbin/register.dat
SCRIPTNAME=$(basename "$0")

Help()
{
   echo -e "\nrmclone is an alternative to the rm command which moves files to a trash bin in compressed format to"
   echo -e "reduce the space used on disk and allowing you to recover them later.\n"
   echo -e "Options: rmclone -h -p -d <identifyer> -i <identifyer> -r <identifyer> <filestodelete>"
   echo -e "Where <identifyer> can be FUID (File Unique ID), name, date or size.\n"
   echo -e "\t-h Print usage information."
   echo -e "\t-p Purge trash bin. All files will be lost."
   echo -e "\t-d Delete files with the given ID from the trash bin."
   echo -e "\t-i Print information about the files located in the trash bin."
   echo -e "\t-r Recover a file in the /home directory of the user."
   echo -e "\t   Use option -i <text> first to see what files will be recovered."
   echo -e "\n Options -d, -i and -r accept FUID, name, date or size to select files.\n"
   echo -e "Examples: rmclone -h                    Print this help."
   echo -e "          rmclone -i                    List all files located in the trash bin."
   echo -e "          rmclone -i 23:03              List files deleted at 23:03."
   echo -e "          rmclone -i 14/April           List files deleted on April 14."
   echo -e "          rmclone -i nsc13jrm           List file with the specified FUID."
   echo -e "          rmclone foo                   Move the file foo to the trash bin."
   echo -e "          rmclone -r foo                Recover the file foo from trash bin."
   echo -e "          rmclone -r nsc13jrm           Recover file with the specified FUID."
   echo -e "          rmclone -d hello.txt          Delete the file hello.txt from the trash bin."
   echo -e "          rmclone -d 03/March/2020      Delete files removed on 2020 13th March.\n"
   exit 0
}

if [ "$#" -eq 0 ]; then Help; exit 1; fi


case "$1" in
     -i) if [ -f "$REGISTRY" ]; then
            echo "-- ID --  --Erased  TimeStamp--  Size  NAME"
            FLINES=$(wc -l "$REGISTRY" | cut -d " " -f1)
            if [ $# -eq 1 ]
            then
               FILESREC="$FLINES"
               column -t < "$REGISTRY"
            else
               FILESREC=$(grep -c "$2" "$REGISTRY")
               if ! grep "$2" "$REGISTRY"; then echo "Nothing was found."; fi
            fi
            echo "$FILESREC files will be recovered using option -c."
            echo -e "There are $FLINES files in the trash bin\n"
            exit 0
         else
            echo -e "There aren't deleted files.\n"
            exit 1
         fi
         ;;

     -p) if [ -f "$REGISTRY" ]; then
            read -rp "Are you sure you want to purge the trash bin [Y/N]? " answer
            if [ "$answer" == "Y" ] || [ "$answer" == "y" ]; then
               rm -f "$BINDIR"/*
               echo -e "Database purged\n"
            else
               echo -e "Nothing was done\n"
            fi
         else echo -e "Trash bin was not found.\n"
         fi
         exit 0
         ;;

        -h) Help
            exit 0
            ;;

        -r) if [ -f "$REGISTRY" ]; then
               if [ "$#" -eq 2 ]; then
                  grep "$2" "$REGISTRY" | while read -r line ; do
                     FUID=$(echo "$line" | tr -s ' ' | cut -d " " -f1)
                     NAME=$(echo "$line" | tr -s ' ' | cut -d " " -f5)
                     echo "Recovering... $NAME"
                     if gzip -dc "$BINDIR/$NAME$FUID" > ./"$NAME"; then
                        # Delete registry entry
                        sed -i "/$2/d" "$REGISTRY"
                        # Delete file in trash bin
                        rm -f "$BINDIR/$NAME$FUID"
                     fi
                  done
                  exit 0
               else
                  echo -e "Wrong parameters. Use $SCRIPTNAME -h for help.\n"
                  exit 1
               fi
            fi
            ;;

        -d) if [ -f "$REGISTRY" ]; then
               if [ "$#" -eq 2 ]; then
                  echo "-- ID --  ---Erased  TimeStamp---  Size  NAME"
                  if grep "$2" "$REGISTRY"; then
                     read -rp "Are you sure you want to delete those files [Y/N]? " answer
                     if [ "$answer" == "Y" ] || [ "$answer" == "y" ]; then
                        echo -e "Deleting..."
                        grep "$2" "$REGISTRY" | while read -r line
                        do
                           FUID=$(echo "$line" | tr -s ' ' | cut -d " " -f1)
                           NAME=$(echo "$line" | tr -s ' ' | cut -d " " -f5)
                           # Delete registry entry
                           if sed -i "/$2/d" "$REGISTRY"; then
                              # Delete file in trash bin
                              rm -f "$BINDIR/$NAME-$FUID"
                           else
                              echo "There was a problem deleting $NAME."
                           fi
                        done
                        echo -e "Done!\n"
                        exit 0
                     else
                        echo -e "Nothing was done.\n"
                        exit 0
                     fi
                  else
                     echo -e "Nothing was found.\n"
                     exit 1
                  fi
                  else
                     echo -e "Wrong parameters. Use $SCRIPTNAME -h for help.\n"
                     exit 1
                  fi

            else echo -e "Trash bin was not found.\n"
            fi
            ;;
esac


if [ ! -d "$BINDIR" ]; then
   mkdir "$BINDIR"
fi


for file in "$@";
  do
     if [ -e "$file" ] && [ -r "$file" ] && [ -O "$file" ];
     then
       SIZE=$(ls -nh "$file" | cut -d " " -f5)
       TIMESTAMP=$(date "+%d/%B/%Y %H:%M:%S")
       #
       # A note about the FUID generator. There are many ways to get a fixed lenght FUID in linux
       # but the way I have used seems to be (one of) the fastest (I need the fastest!) but maybe
       # it's not the most portable. If you need portability, use the next one instead:
       # FUID=$(openssl rand -hex 4)
       #
       FUID=$(cut -d "-" -f1 < /proc/sys/kernel/random/uuid)
       FILENAME=$(basename "$file")
       if gzip -c "$file" > "$BINDIR/$FILENAME$FUID";
       then
          echo "$FUID  $TIMESTAMP $SIZE  $FILENAME" >> "$REGISTRY"
          rm -f  "$file"
       fi
     else
        echo "$SCRIPTNAME: cannot remove '$file': File doesn't exist, isn't readable or doesn't belong to you."
     fi
  done
